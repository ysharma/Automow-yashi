/* Auto-generated by genmsg_cpp for file /home/sparc/ros/stacks/Automow_PCB/msg/batt_status.msg */
#ifndef AUTOMOW_PCB_MESSAGE_BATT_STATUS_H
#define AUTOMOW_PCB_MESSAGE_BATT_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Automow_PCB
{
template <class ContainerAllocator>
struct batt_status_ {
  typedef batt_status_<ContainerAllocator> Type;

  batt_status_()
  : LED1(false)
  , LED2(false)
  , LED3(false)
  , batt_percent(0)
  {
  }

  batt_status_(const ContainerAllocator& _alloc)
  : LED1(false)
  , LED2(false)
  , LED3(false)
  , batt_percent(0)
  {
  }

  typedef uint8_t _LED1_type;
  uint8_t LED1;

  typedef uint8_t _LED2_type;
  uint8_t LED2;

  typedef uint8_t _LED3_type;
  uint8_t LED3;

  typedef int8_t _batt_percent_type;
  int8_t batt_percent;


private:
  static const char* __s_getDataType_() { return "Automow_PCB/batt_status"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "db7092bf346ed0849fd57e7a956cfd11"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool LED1\n\
bool LED2\n\
bool LED3\n\
int8 batt_percent\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, LED1);
    ros::serialization::serialize(stream, LED2);
    ros::serialization::serialize(stream, LED3);
    ros::serialization::serialize(stream, batt_percent);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, LED1);
    ros::serialization::deserialize(stream, LED2);
    ros::serialization::deserialize(stream, LED3);
    ros::serialization::deserialize(stream, batt_percent);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(LED1);
    size += ros::serialization::serializationLength(LED2);
    size += ros::serialization::serializationLength(LED3);
    size += ros::serialization::serializationLength(batt_percent);
    return size;
  }

  typedef boost::shared_ptr< ::Automow_PCB::batt_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Automow_PCB::batt_status_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct batt_status
typedef  ::Automow_PCB::batt_status_<std::allocator<void> > batt_status;

typedef boost::shared_ptr< ::Automow_PCB::batt_status> batt_statusPtr;
typedef boost::shared_ptr< ::Automow_PCB::batt_status const> batt_statusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Automow_PCB::batt_status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Automow_PCB::batt_status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Automow_PCB

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Automow_PCB::batt_status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Automow_PCB::batt_status_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Automow_PCB::batt_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "db7092bf346ed0849fd57e7a956cfd11";
  }

  static const char* value(const  ::Automow_PCB::batt_status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdb7092bf346ed084ULL;
  static const uint64_t static_value2 = 0x9fd57e7a956cfd11ULL;
};

template<class ContainerAllocator>
struct DataType< ::Automow_PCB::batt_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Automow_PCB/batt_status";
  }

  static const char* value(const  ::Automow_PCB::batt_status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Automow_PCB::batt_status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool LED1\n\
bool LED2\n\
bool LED3\n\
int8 batt_percent\n\
\n\
";
  }

  static const char* value(const  ::Automow_PCB::batt_status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Automow_PCB::batt_status_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Automow_PCB::batt_status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.LED1);
    stream.next(m.LED2);
    stream.next(m.LED3);
    stream.next(m.batt_percent);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct batt_status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Automow_PCB::batt_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Automow_PCB::batt_status_<ContainerAllocator> & v) 
  {
    s << indent << "LED1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED1);
    s << indent << "LED2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED2);
    s << indent << "LED3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED3);
    s << indent << "batt_percent: ";
    Printer<int8_t>::stream(s, indent + "  ", v.batt_percent);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTOMOW_PCB_MESSAGE_BATT_STATUS_H

