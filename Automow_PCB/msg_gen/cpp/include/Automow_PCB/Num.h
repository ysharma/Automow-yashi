/* Auto-generated by genmsg_cpp for file /home/sparc/ros/stacks/Automow_PCB/msg/Num.msg */
#ifndef AUTOMOW_PCB_MESSAGE_NUM_H
#define AUTOMOW_PCB_MESSAGE_NUM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace Automow_PCB
{
template <class ContainerAllocator>
struct Num_ {
  typedef Num_<ContainerAllocator> Type;

  Num_()
  : cutter_left(0)
  , cutter_right(0)
  , LEDstatus(0)
  , temp1(0)
  , temp2(0)
  , voltage(0)
  , current(0)
  {
  }

  Num_(const ContainerAllocator& _alloc)
  : cutter_left(0)
  , cutter_right(0)
  , LEDstatus(0)
  , temp1(0)
  , temp2(0)
  , voltage(0)
  , current(0)
  {
  }

  typedef int8_t _cutter_left_type;
  int8_t cutter_left;

  typedef int8_t _cutter_right_type;
  int8_t cutter_right;

  typedef int8_t _LEDstatus_type;
  int8_t LEDstatus;

  typedef int8_t _temp1_type;
  int8_t temp1;

  typedef int8_t _temp2_type;
  int8_t temp2;

  typedef int16_t _voltage_type;
  int16_t voltage;

  typedef int16_t _current_type;
  int16_t current;


private:
  static const char* __s_getDataType_() { return "Automow_PCB/Num"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1cd5a6007191577a7018ee6a7ba45df2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "int8 cutter_left\n\
int8 cutter_right\n\
int8 LEDstatus\n\
int8 temp1\n\
int8 temp2\n\
int16 voltage\n\
int16 current \n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, cutter_left);
    ros::serialization::serialize(stream, cutter_right);
    ros::serialization::serialize(stream, LEDstatus);
    ros::serialization::serialize(stream, temp1);
    ros::serialization::serialize(stream, temp2);
    ros::serialization::serialize(stream, voltage);
    ros::serialization::serialize(stream, current);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, cutter_left);
    ros::serialization::deserialize(stream, cutter_right);
    ros::serialization::deserialize(stream, LEDstatus);
    ros::serialization::deserialize(stream, temp1);
    ros::serialization::deserialize(stream, temp2);
    ros::serialization::deserialize(stream, voltage);
    ros::serialization::deserialize(stream, current);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(cutter_left);
    size += ros::serialization::serializationLength(cutter_right);
    size += ros::serialization::serializationLength(LEDstatus);
    size += ros::serialization::serializationLength(temp1);
    size += ros::serialization::serializationLength(temp2);
    size += ros::serialization::serializationLength(voltage);
    size += ros::serialization::serializationLength(current);
    return size;
  }

  typedef boost::shared_ptr< ::Automow_PCB::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Automow_PCB::Num_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Num
typedef  ::Automow_PCB::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::Automow_PCB::Num> NumPtr;
typedef boost::shared_ptr< ::Automow_PCB::Num const> NumConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::Automow_PCB::Num_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::Automow_PCB::Num_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace Automow_PCB

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::Automow_PCB::Num_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::Automow_PCB::Num_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::Automow_PCB::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1cd5a6007191577a7018ee6a7ba45df2";
  }

  static const char* value(const  ::Automow_PCB::Num_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1cd5a6007191577aULL;
  static const uint64_t static_value2 = 0x7018ee6a7ba45df2ULL;
};

template<class ContainerAllocator>
struct DataType< ::Automow_PCB::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Automow_PCB/Num";
  }

  static const char* value(const  ::Automow_PCB::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::Automow_PCB::Num_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 cutter_left\n\
int8 cutter_right\n\
int8 LEDstatus\n\
int8 temp1\n\
int8 temp2\n\
int16 voltage\n\
int16 current \n\
\n\
\n\
";
  }

  static const char* value(const  ::Automow_PCB::Num_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::Automow_PCB::Num_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::Automow_PCB::Num_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cutter_left);
    stream.next(m.cutter_right);
    stream.next(m.LEDstatus);
    stream.next(m.temp1);
    stream.next(m.temp2);
    stream.next(m.voltage);
    stream.next(m.current);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Num_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Automow_PCB::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::Automow_PCB::Num_<ContainerAllocator> & v) 
  {
    s << indent << "cutter_left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cutter_left);
    s << indent << "cutter_right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cutter_right);
    s << indent << "LEDstatus: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LEDstatus);
    s << indent << "temp1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temp1);
    s << indent << "temp2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temp2);
    s << indent << "voltage: ";
    Printer<int16_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTOMOW_PCB_MESSAGE_NUM_H

