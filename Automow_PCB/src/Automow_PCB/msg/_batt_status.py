"""autogenerated by genmsg_py from batt_status.msg. Do not edit."""
import roslib.message
import struct


class batt_status(roslib.message.Message):
  _md5sum = "db7092bf346ed0849fd57e7a956cfd11"
  _type = "Automow_PCB/batt_status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool LED1
bool LED2
bool LED3
int8 batt_percent

"""
  __slots__ = ['LED1','LED2','LED3','batt_percent']
  _slot_types = ['bool','bool','bool','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       LED1,LED2,LED3,batt_percent
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(batt_status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.LED1 is None:
        self.LED1 = False
      if self.LED2 is None:
        self.LED2 = False
      if self.LED3 is None:
        self.LED3 = False
      if self.batt_percent is None:
        self.batt_percent = 0
    else:
      self.LED1 = False
      self.LED2 = False
      self.LED3 = False
      self.batt_percent = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3Bb.pack(_x.LED1, _x.LED2, _x.LED3, _x.batt_percent))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.LED1, _x.LED2, _x.LED3, _x.batt_percent,) = _struct_3Bb.unpack(str[start:end])
      self.LED1 = bool(self.LED1)
      self.LED2 = bool(self.LED2)
      self.LED3 = bool(self.LED3)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3Bb.pack(_x.LED1, _x.LED2, _x.LED3, _x.batt_percent))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.LED1, _x.LED2, _x.LED3, _x.batt_percent,) = _struct_3Bb.unpack(str[start:end])
      self.LED1 = bool(self.LED1)
      self.LED2 = bool(self.LED2)
      self.LED3 = bool(self.LED3)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3Bb = struct.Struct("<3Bb")
